Using ChatGPT 4 to create a Connections Game


toontalk@gmail.com - home page
Introduction
The New York Times Connections game is a game that was released after GPT 4 was trained so it is unlikely to base its help in creating a similar game on seeing its implementation in its training data. Furthermore, the game involves repeatedly selecting 4 words (out of 16) that share a category. Presumably the New York Times creates each day’s game “manually”. I was attracted to the challenge of getting GPT-4 to come up with the categories and words. What is particularly challenging is to make games that have “ringers”. While less often than I would like, GPT-4 did sometimes come up with such games. For example, three of the categories were programming languages, animals, and jewels. The ringers were “ruby” and “python”.


After two hours of conversing with ChatGPT 4 there was a crude ugly version of the game. After two or three more hours, a polished game was ready. The game is implemented by 270 lines of JavaScript, 180 lines of CSS, and 80 lines of HTML. (The source code is available from the browser.) Here is the entire conversation. The OpenAI API usage during development cost me $0.24. Each game costs about one cent.
ChatGPT 4’s summary of the conversation
1. Introduction to Connections Game: You introduced the "Connections" puzzle game by The New York Times and asked for a high-level plan to implement it as a static web page. I provided the plan, outlining the HTML, CSS, and JavaScript components.
2. Base Code: I prepared the basic HTML, CSS, and JavaScript code, leaving function definitions empty for you to implement later.
3. Visual Feedback: You requested to change the background color [of the words in the puzzle] and add a button to clear currently selected words when a group is correct. We also changed the color and removed the use of JavaScript alerts in favor of displaying messages on the page.
4. GPT-4 Integration: You wanted to use GPT-4 to generate categories and words for the game. I provided an API request example and later adapted it to match the GPT-4 chat completions API. You also uploaded the GPT-4 API documentation for clarification.
5. JavaScript Fixes: We addressed an issue where clicking a word didn't behave as expected. We also discussed ensuring there are no duplicate words and how the categories object should be updated.
6. Error Handling: I added logic to handle JSON parsing errors and gave a solution for a bug where the list of "not found" categories was empty. We debugged this issue, identifying a variable scope problem as the likely cause.
7. Game Over Logic: You wanted the game to end after four mistakes and reveal the categories not yet found. I provided the code to implement this.
8. Customizable GPT-4 Prompt: You requested a text area where users can edit the default GPT-4 prompt for generating categories and words. I provided the HTML, CSS, and JavaScript needed to implement this feature.
9. Instructions Modal: Lastly, you asked for a button that displays game instructions in a modal dialog, including a special acknowledgment that the app was created with the help of ChatGPT-4. [ChatGPT generated the text of the instructions in ten bullet points.]
After asking for this summary I then continued
10. Improving the game’s appearance: I asked for CSS to improve the look of various components of the game.
After writing this document I continued
11. Explaining and commenting on a complicated function: In reading the JavaScript I found it hard to understand the validateSelectedItems so I asked for help.
12. Fixing a bug with multiple initializations: The game incremented the mistakes counter incorrectly. ChatGPT quickly diagnosed the problem and suggested a complex solution. A small suggestion led to a cleaner, better fix.
13. Fixing a bug deselecting incorrect guesses: I needed to report the exact conditions where this was happening to generate a fix.
Discussion
Compared to many of my other experiments with using ChatGPT for creating web apps there were relatively few bugs and they were quickly addressed. However, additional testing did reveal two new bugs that were fixed after I told it what was going wrong in enough detail.


One special feature of the game is that the player can edit the prompt given to GPT-4 to populate the grid with four words for each of four categories. Players can add “Choose words to fit a science fiction theme.” or “Use Swedish for the words”.


  

The result of adding “Choose words to fit a murder mystery ghost story theme.” to the prompt
  

Another game with the same prompt
  

Choose words to fit a murder mystery science fiction story theme. 


FUTURISTIC WEAPONS: Photon Blaster, Quantum Dagger, Psi-Shield, Neutrino Rifle
ALIEN SPECIES: Zorgon, Golymn, Plitharium, Quriid
SPACESHIP PARTS: Hyperdrive, Cryochamber, Ablative Armour, Nanobot Swarm
EXTRATERRESTRIAL LOCATIONS: Vega Badlands, Andromeda Falls, Gorgon Craters, Helix Nebula


The ability of the player to edit the game prompt not only can lead to strange customized games but provides an opportunity for players to explore how chatbots respond to different styles of prompts.