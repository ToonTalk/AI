Pseudo code from ChatGPT 4
Ken Kahn <toontalk@gmail.com>  home page


Introduction
The whole program
Natural language pseudo code
Structured pseudo code
Expanding on some details
Repeating this with Gemini Advanced
Nesting considered harmful
What are the pros and cons of minimizing nesting of programs?
ChatGPT’s response to this question
Gemini Advanced’s response
An example
Pseudo code of the nested version
Pseudo code of the minimal nested version
Introduction
After creating Emoji Adventures I uploaded the index.html file and asked ChatGPT 4 (February 2024) for pseudo code. Here is the entire log.
The whole program
In response to “Can you write this file in pseudo code please?” it provided a nice overview of the program in two paragraphs followed by this:


HTML Structure:
 Container for emojis
 Container for interactive buttons (microphone, black hole, dance, chase, etc.)


CSS Styles:
 Styles for emojis (size, position, transitions)
 Styles for button containers and individual buttons
 Styles for special elements like stop signs in buttons


JavaScript:
 Load model for emoji descriptions
 Implement speech recognition for various commands
 Define functions to create and manipulate emojis (size, speed, random generation)
 Implement interactive modes:
   Black hole: Attracts emojis to a point
   Dance: Animate emojis based on music beats
   Chase: Emojis chase each other
   Spell: Form words with emojis
 Handle user interactions:
   Clicks and touch events to create emojis
   Button interactions to activate different modes
 Utilize external libraries for features like TensorFlow.js


Key Data Structures:
 emojiDict: Dictionary mapping commands to emoji characters
 emojiTargets: Mapping of emojis to their movement targets
Natural language pseudo code
In response to “Can you show me the pseudo code for the black hole feature please?” it produced:


1. Initialization:
   1. Create a blackHole div element with a fixed size (50px x 50px), circular shape (borderradius 50%), black background color, and initially hidden.
   2. Append the blackHole div to the document body.
   3. Initialize a flag blackHoleActive as false.
2. Function to Move the Black Hole:
   1. Define moveBlackHole(x, y) function to position the black hole at the given x, y coordinates and make it visible.
3. Event Listeners for Mouse and Touch Movements:
   1. Add an event listener for mousemove. When the blackHoleActive flag is true, call moveBlackHole with the mouse's clientX and clientY coordinates.
   2. Add an event listener for touchmove. If blackHoleActive is true and there are touch events, move the black hole to the touch event's clientX and clientY coordinates.
4. Function to Update Black Hole Mode:
   1. The function updateBlackHoleMode performs several actions:
   2. If no emojis are present or if blackHoleActive is false, hide the black hole and exit the function.
   3. If the black hole is active, calculate the black hole's center coordinates and its squared radius.
   4. Iterate through each emoji. For each emoji, calculate the squared distance from its center to the black hole's center.
   5. If the squared distance is less than the black hole's squared radius, remove the emoji from the array and the document.
   6. If the squared distance is greater, calculate a velocity vector for the emoji, influenced by the black hole's gravity strength and the distance, and move the emoji accordingly.
   7. Continuously request frame updates as long as the black hole is active.
Structured pseudo code
In response to “Can you show me the black hole code as Structured Pseudocode”:


FUNCTION createBlackHole
    CREATE blackHole DIV
    SET blackHole id, width, height, borderRadius, backgroundColor, position, display
    APPEND blackHole to document body
    RETURN blackHole


INITIALIZE blackHole by calling createBlackHole
SET blackHoleActive to FALSE


FUNCTION moveBlackHole(x, y)
    SET blackHole style left to x
    SET blackHole style top to y
    SET blackHole display to 'block'


ADD EVENT LISTENER to document for 'mousemove'
    IF blackHoleActive THEN
        CALL moveBlackHole with mouse coordinates


ADD EVENT LISTENER to document for 'touchmove'
    IF blackHoleActive and there are touch events THEN
        CALL moveBlackHole with touch coordinates


FUNCTION updateBlackHoleMode
    SELECT all elements with class 'emoji'
    IF no emojis OR blackHoleActive is FALSE THEN
        SET blackHoleActive to FALSE
        HIDE blackHole
        EXIT FUNCTION


    SHOW blackHole
    SET blackHoleRadius, blackHoleCenterX, blackHoleCenterY
    INITIALIZE processedCount, maxUpdateTime, startTime


    CONVERT NodeList emojis to Array emojiArray
    WHILE processedCount < length of emojiArray
        IF current time  startTime > maxUpdateTime THEN
            EXIT LOOP


        SELECT random emoji from emojiArray
        CALCULATE emojiCenterX, emojiCenterY, dx, dy, distanceSquared
        IF distanceSquared < blackHoleRadiusSquared THEN
            REMOVE emoji from emojiArray and document
        ELSE IF distanceSquared > 0 THEN
            CALCULATE strength, distance
            UPDATE emoji velocity
        ELSE
            SET emoji velocity to {x: 0, y: 0}


        UPDATE emoji position
        INCREMENT processedCount


    IF blackHoleActive THEN
        REQUEST animation frame for updateBlackHoleMode
Expanding on some details
In response to ‘Expand on "CALCULATE strength, distance
                                            UPDATE emoji velocity" 
Please’:


FOR EACH emoji IN emojiArray
    // Calculate the center coordinates of the emoji
    SET emojiCenterX to emoji's offsetLeft plus half of emoji's offsetWidth
    SET emojiCenterY to emoji's offsetTop plus half of emoji's offsetHeight


    // Calculate the horizontal and vertical distances from the black hole
    SET dx to blackHoleCenterX minus emojiCenterX
    SET dy to blackHoleCenterY minus emojiCenterY


    // Calculate the squared distance from the black hole
    SET distanceSquared to (dx squared) plus (dy squared)


    // Check if the emoji is within the black hole's radius
    IF distanceSquared < blackHoleRadiusSquared
        REMOVE the emoji from the array and the document
    ELSE IF distanceSquared > 0
        // Calculate the gravitational strength, inversely proportional to the distance squared
        SET strength to gravityStrength divided by distanceSquared


        // Calculate the actual distance (not squared)
        SET distance to square root of distanceSquared


        // Update emoji's velocity based on the direction and strength of gravity
        INCREMENT emoji.velocity.x by (strength times dx divided by distance)
        INCREMENT emoji.velocity.y by (strength times dy divided by distance)
    ELSE
        // If the emoji is exactly at the black hole's center, set velocity to zero
        SET emoji.velocity to {x: 0, y: 0}
Repeating this with Gemini Advanced


Here's a breakdown of the pseudocode that represents how this JavaScript function handles black hole behavior. I've added comments to explain each section:
Overall Function Logic


Code snippet
function updateBlackHoleMode()
   // EARLY EXIT CASES:

   if there are no emojis on the page OR blackHoleActive flag is false: 
       set blackHoleActive to false
       hide the black hole visual element 
       hide any stop sign graphic associated with the black hole
       exit the function 

   // BLACK HOLE ACTIVE:

   display the black hole visual element

   define blackHoleRadius and calculate blackHoleRadiusSquared 
   calculate blackHoleCenterX and blackHoleCenterY coordinates

   start performance timer (for time management)
   convert emoji list into an array

   while there are still emojis in the array:
       if performance time exceeds maxUpdateTime:
           break out of the loop (to prevent performance slowdown)

       pick a random emoji from the emojiArray

       calculate emojiCenterX and emojiCenterY coordinates

       calculate differences in x and y positions (dx, dy) 
       calculate squared distance between emoji and black hole center

       if squared distance is less than blackHoleRadiusSquared:
           remove the emoji from the screen
           remove the emoji from emojiArray 

       else if distanceSquared is larger than 0: 
           calculate the gravitational strength using gravityStrength
           calculate actual distance using square root
           update emoji's velocity based on force and direction

       else:
           set emoji's velocity to 0

       update emoji's position based on its velocity 

   if blackHoleActive flag is true:
       request another animation frame to continue the update loop

Key Concepts
* Black Hole as an Attractor: The code simulates a black hole's gravitational pull on emoji objects.
* Event Horizon: Emojis within the blackHoleRadius are removed, simulating crossing an event horizon.
* Gravity Simulation: Emojis outside the event horizon experience a force pulling them towards the black hole. The strength of this force is based on an inverse square law (adjustable with gravityStrength).
* Animation: The requestAnimationFrame mechanism creates a smooth animation loop.
* Performance Optimization: The loop includes a timing check to break if it takes too long in a single frame, preventing the browser from slowing down.
Let me know if you want me to break down any specific part of the pseudocode in more detail!


Absolutely! Let's dive into those lines:
1. "calculate the gravitational strength using gravityStrength"
* Concept: Real gravity follows an inverse square law: the force decreases with the square of the distance. This code likely simulates that in a simplified way.
* Assumption: There's likely a variable named gravityStrength defined elsewhere in your code. This acts as a scaling factor to make the black hole's attraction stronger or weaker for gameplay or visual effect.
* Pseudocode Example:


Code snippet
forceMagnitude = gravityStrength / distanceSquared  

2. "calculate actual distance using square root"
* Why squared distance: The code initially checks against blackHoleRadiusSquared in a previous if statement. Calculating the squared distance between the emoji and the black hole there was an optimization – squares are computationally cheaper than square roots.
* Now needing real distance: To apply gravity properly, you need the actual distance between the emoji and black hole center.
* Pseudocode Example:


Code snippet
distance = square_root(distanceSquared) 

3. "update emoji's velocity based on force and direction"
* Force as a Vector: Gravity has both magnitude (calculated earlier) and direction (towards the black hole). Your code probably has a velocity object attached to each emoji, with x and y components.
* Breaking Down Forces: The gravitational force needs to be split into how much it pulls along the xaxis and how much along the yaxis.
* Pseudocode Example:


Code snippet
forceDirectionX = dx / distance  // Normalized direction along xaxis
forceDirectionY = dy / distance  // Normalized direction along yaxis

emoji.velocity.x += forceMagnitude * forceDirectionX 
emoji.velocity.y += forceMagnitude * forceDirectionY 

Let's put it all together
The core idea is this:
1. How strong is the pull? Calculate the gravity force based on a scaling factor (gravityStrength) and the inverse square of the distance.
2. Which direction? Determine the direction of the pull (normalized vector towards the black hole).
3. Apply to velocity: Scale that directional force appropriately and add it to the emoji's velocity. This changes both how fast and in what direction the emoji is moving.
Please note: This is a simplified simulation, not fully accurate physics. Let me know if you'd like more detail on how to create a more realistic gravitational model!
Nesting considered harmful
I tend to write deeply nested code but often wonder if this is a bad habit (picked up from Lisp?). I first began wondering about this when a 1970s MIT AI Lab friend made a good argument that Prolog’s inability to nest was a feature not a shortcoming. It forces one to come up with names for intermediate values and is arguably more readable.


Nesting I think adds a cognitive demand that helper functions alleviate to some extent. Maybe an exception is mathematical formulas where the convention is to nest. But maybe that makes it harder to understand.


Also I see that ChatGPT tends to generate code like this:


const threshold = 5; // Pixels, adjust based on how close they need to get
           
// Get current position of emoji
const emojiX = parseFloat(emoji.style.left);
const emojiY = parseFloat(emoji.style.top);
           
// Get target position
const targetX = parseFloat(target.style.left);
const targetY = parseFloat(target.style.top);
           
// Calculate distance to target
const dx = targetX - emojiX;
const dy = targetY - emojiY;
const distance = Math.sqrt(dx * dx + dy * dy);
           
return distance <= threshold;
	

Contrast that with much more nesting (how I usually program):


const threshold = 5; // Pixels, adjust based on how close they need to get
           
// Calculate distance to target
const dx = parseFloat(target.style.left) - parseFloat(emoji.style.left);
const dy = parseFloat(target.style.top) - parseFloat(emoji.style.top);
           
return Math.sqrt(dx * dx + dy * dy) <= threshold;
	

Since the chatbot is writing the code, the question is which version is more readable  not which one is easiest to write. Yes, conditionals and iteration naturally lead to some nesting but see this example below.
What are the pros and cons of minimizing nesting of programs?
ChatGPT’s response to this question
Minimizing the nesting of programs, often referred to as reducing the depth of nested loops, conditionals, and other control structures, can have several pros and cons:


### Pros


1. Readability: Code with less nesting is generally easier to read and understand. Each level of nesting adds a layer of complexity, so reducing nesting can make the code more straightforward.
2. Maintainability: Simpler, less nested code is easier to maintain and modify. Changes can be made with a clearer understanding of the potential impact, reducing the risk of introducing bugs.
3. Debugging Ease: Fewer nesting levels can simplify the debugging process. It's easier to track the flow of control through the program and identify where things might be going wrong.
4.  Reduced Cognitive Load: Less nested code means that there's less for a programmer to keep in mind at once when working with the code, leading to fewer mistakes and more efficient coding.
5. 5. Performance Improvements: In some cases, reducing nesting can lead to performance improvements, especially if it means avoiding unnecessary computations or iterations.


### Cons


1. Oversimplification: In an effort to reduce nesting, the logic of a program might be oversimplified, potentially leading to errors or omission of necessary checks and balances.
2. Code Duplication: Sometimes, in an effort to reduce nesting, developers might end up duplicating code. This can lead to its own set of maintenance issues and can make the code bulkier.
3. Reduced Clarity in Certain Contexts: For some algorithms, a certain level of nesting is natural and makes the code clearer. Overzealous flattening of these structures can actually make the code harder to understand.
4. Performance Tradeoffs: While in some cases performance can improve, in others, attempts to reduce nesting might lead to less efficient algorithms, especially if it involves adding additional data structures or computations.
5. Complex Refactoring: In existing, complex codebases, efforts to reduce nesting can require significant refactoring, which might introduce new bugs or require a substantial amount of testing and validation.


In summary, while minimizing nesting can often lead to cleaner, more readable, and maintainable code, it's important to balance this with the need to maintain clear, efficient, and accurate logic. The best approach often depends on the specific context and requirements of the project at hand.
Gemini Advanced’s response
In programming, "nesting" means putting code structures (like loops, conditionals, or functions) inside other code structures. Here's a breakdown of the pros and cons of minimizing nesting:
Pros of Minimizing Nesting
* Improved Readability: Deeply nested code can become complex and visually cluttered. Reducing nesting makes the control flow (how the code executes) easier to follow and understand.
* Enhanced Maintainability: Less nested code is generally easier to change or debug. When logic is simplified, finding and fixing errors becomes less error prone.
* Error Reduction: In deeply nested structures, it's simpler to misplace closing braces or misunderstand the level at which variables are in scope, leading to potential bugs. Flatter code can mitigate some of this risk.
* Modularity: Breaking down a large nested structure into smaller functions creates code that's more self contained and reusable.
Cons of Minimizing Nesting
* Potential OverAbstraction: Taken to extremes, minimizing nesting can make code overly fragmented. Too many tiny functions or a focus on flattening without reason can reduce cohesion and actually make the code harder to follow.
* Performance Overhead (Situational): In some cases, function calls (which come with breaking down nested code) can add a tiny performance overhead. However, modern compilers are very good at optimization, so this is rarely a major concern unless you're in performance critical areas.
* Loss of Context: Sometimes moderate nesting helps group related logic, making it easier to understand the high level intent of the code. Overflattening can make this context less obvious.
How to Minimize Nesting Effectively
* Extract Functions: Identify chunks of nested code that perform a specific task, then refactor them into well named functions.
* Use Early Returns: In conditional blocks, consider using return statements to exit a function when certain conditions are met instead of nesting further if/else blocks.
* Employ Guard Clauses: Guard clauses are conditions placed at the beginning of a function or code block to immediately exit if they're not met, avoiding nested structures.
* Utilize Loop Alternatives: Sometimes loops can be replaced with higher order functions (like map, filter, reduce), removing the need for an explicit counter and an outer loop structure.
Important Note:
Readability and maintainability should be your primary priorities. Don't sacrifice clarity for the sake of minimizing nesting blindly. Moderation and good judgment are key.
Let me know if you'd like examples of any of these techniques!
An example
Consider the following function created by ChatGPT incrementally as more features were requested.


function updateChaseMode() {
   let emojis = document.querySelectorAll('.emoji');
   let chasers = new Map();
   
   // Determine chasers for each emoji
   emojis.forEach(emoji => {
       chasers.set(emoji, []);
   });

   // Determine chasers for each emoji
   emojis.forEach(emoji => {
       const target = emojiTargets.get(emoji);
       if (target && !target.isRemoved) {
           const targetChasers = chasers.get(target);
           if (targetChasers) {
               targetChasers.push(emoji);
           }
       }
   });
   
  let processedCount = 0;
  const maxUpdateTime = 16; // milliseconds
  const startTime = performance.now();
   
  while (processedCount < emojis.length) {
      if (performance.now()  startTime > maxUpdateTime) {
         break; // Exit the loop if maximum update time is exceeded
       }
   
       // Pick a random emoji
       const randomIndex = Math.floor(Math.random() * emojis.length);
       const emoji = emojis[randomIndex];
   
       let target = emojiTargets.get(emoji);

       // Check if the target is still valid
       if (!target || target.isRemoved) {
           assignNewTarget(emoji);
           // Assign a new target
           target = emojiTargets.get(emoji);
           // Update the target reference
       }
   
       if (target && !target.isRemoved) {
           // Calculate distance to the target
           const dx = target.offsetLeft  emoji.offsetLeft;
           const dy = target.offsetTop  emoji.offsetTop;
           const distance = Math.sqrt(dx * dx + dy * dy);
   
           // Remove target and assign a new one if distance is small enough
           if (distance < 10) {
               // Threshold for reaching the target
               target.remove();
               target.isRemoved = true;
               assignNewTarget(emoji);
               // Assign a new target
           } else {
               // Calculate attraction towards the target
               let dx = target.offsetLeft - emoji.offsetLeft;
               let dy = target.offsetTop - emoji.offsetTop;
               let distance = Math.sqrt(dx * dx + dy * dy);
               let attraction = {
                   x: dx / distance,
                   y: dy / distance
               };
   
               // Calculate repulsion from chasers
               let repulsion = {
                   x: 0,
                   y: 0
               };
               chasers.get(emoji).forEach(chaser => {
                   let rdx = emoji.offsetLeft - chaser.offsetLeft;
                   let rdy = emoji.offsetTop - chaser.offsetTop;
                   let rDistance = Math.sqrt(rdx * rdx + rdy * rdy);
                   rDistance = Math.max(rDistance, 1);
                   // Avoid division by zero
                   repulsion.x += rdx / rDistance;
                   repulsion.y += rdy / rDistance;
               });
   
               // Combine attraction and repulsion
               const speed = emojiSpeed; // Use the global emojiSpeed variable
               let vx = (attraction.x + repulsion.x) * speed;
               let vy = (attraction.y + repulsion.y) * speed;
   
               const windowWidth = window.innerWidth;
               const windowHeight = window.innerHeight;
   
               // Calculate new position with boundaries
               let newX = emoji.offsetLeft + vx;
               let newY = emoji.offsetTop + vy;
   
               // Only rotate the emoji if it is moving
               if (vx !== 0 || vy !== 0) {
                   // Calculate the angle of motion
                   const angle = Math.atan2(vy, vx) * 180 / Math.PI + 90;
                   
                   // Rotate the emoji to face the direction of motion
                   emoji.style.transform = `rotate(${angle}deg)`;
               }
   
               // Boundary checks and adjustments
               if (newX < 0) {
                   newX = 0;
                   vx = vx;
                   // Reverse horizontal velocity
               } else if (newX + emoji.offsetWidth > windowWidth) {
                   newX = windowWidth - emoji.offsetWidth;
                   vx = vx;
                   // Reverse horizontal velocity
               }
   
               if (newY < 0) {
                   newY = 0;
                   vy = vy;
                   // Reverse vertical velocity
               } else if (newY + emoji.offsetHeight > windowHeight) {
                   newY = windowHeight - emoji.offsetHeight;
                   vy = vy;
                   // Reverse vertical velocity
               }
   
               // Update position with boundaries
               emoji.style.left = newX + 'px';
               emoji.style.top = newY + 'px';
           }
   
           processedCount++;
       }
}
	

Here is the response from ChatGPT 4 to “Please rewrite the following with minimal nesting: <paste of the above function>”: (after getting it to fix a few mistakes it made in the process)


function updateChaseMode() {
   let emojis = document.querySelectorAll('.emoji');
   let chasers = initializeChasers(emojis);

   updateChasers(emojis, chasers);

   const maxUpdateTime = 16; // milliseconds
   const startTime = performance.now();
   let processedCount = 0;

   while (processedCount < emojis.length) {
       if (performance.now() - startTime > maxUpdateTime) {
           break; // Exit the loop if maximum update time is exceeded
       }

       // Pick a random emoji
       const randomIndex = Math.floor(Math.random() * emojis.length);
       const emoji = emojis[randomIndex];

       if (!processEmoji(emoji, chasers)) {
           continue; // Skip to the next iteration if the emoji was not processed
       }

       processedCount++;
   }

   if (isChaseMode) {
       requestAnimationFrame(updateChaseMode);
   }
}

function initializeChasers(emojis) {
   let chasers = new Map();
   emojis.forEach(emoji => {
       chasers.set(emoji, []);
   });
   return chasers;
}

function updateChasers(emojis, chasers) {
   emojis.forEach(emoji => {
       const target = emojiTargets.get(emoji);
       if (target && !target.isRemoved) {
           const targetChasers = chasers.get(target);
           targetChasers.push(emoji);
       }
   });
}

function processEmoji(emoji, chasers) {
   let target = emojiTargets.get(emoji);
   if (!target || target.isRemoved) {
       assignNewTarget(emoji);
       target = emojiTargets.get(emoji);
   }

   if (!target || target.isRemoved) {
       return false; // Target is not valid
   }

   processMovement(emoji, target, chasers);
   
   return true; // Emoji was processed
   
}

function processMovement(emoji, target, chasers) {
   const { dx, dy, distance } = calculateDistance(emoji, target);
   if (distance < 10) {
       target.remove();
       target.isRemoved = true;
       assignNewTarget(emoji);
   } else {
       moveEmoji(emoji, dx, dy, distance, chasers);
   }
}

function calculateDistance(emoji, target) {
   const dx = target.offsetLeft  emoji.offsetLeft;
   const dy = target.offsetTop  emoji.offsetTop;
   const distance = Math.sqrt(dx * dx + dy * dy);
   return { dx, dy, distance };
}

function moveEmoji(emoji, dx, dy, distance, chasers) {
   let { attraction, repulsion } = calculateForces(emoji, dx, dy, distance, chasers);
   applyMovement(emoji, attraction, repulsion);
}

function calculateForces(emoji, dx, dy, distance, chasers) {
   let attraction = { x: dx / distance, y: dy / distance };
   let repulsion = calculateRepulsion(emoji, chasers);
   return { attraction, repulsion };
}

function calculateRepulsion(emoji, chasers) {
   let repulsion = { x: 0, y: 0 };
   chasers.get(emoji).forEach(chaser => {
       let { rdx, rdy, rDistance } = calculateRepulsionDistance(emoji, chaser);
       repulsion.x += rdx / rDistance;
       repulsion.y += rdy / rDistance;
   });
   return repulsion;
}

function calculateRepulsionDistance(emoji, chaser) {
   let rdx = emoji.offsetLeft - chaser.offsetLeft;
   let rdy = emoji.offsetTop - chaser.offsetTop;
   let rDistance = Math.max(Math.sqrt(rdx * rdx + rdy * rdy), 1); // Avoid division by zero
   return { rdx, rdy, rDistance };
}

function applyMovement(emoji, attraction, repulsion) {
   const speed = emojiSpeed;
   let vx = (attraction.x + repulsion.x) * speed;
   let vy = (attraction.y + repulsion.y) * speed;
   updatePosition(emoji, vx, vy);
}

function calculateNewPosition(emoji, vx, vy) {
   let newX = emoji.offsetLeft + vx;
   let newY = emoji.offsetTop + vy;
   return { newX, newY };
}

function updatePosition(emoji, vx, vy) {
   let { newX, newY } = calculateNewPosition(emoji, vx, vy);
   let adjustedPosition = adjustForBoundaries(emoji, newX, newY, vx, vy);

   updateEmojiPosition(emoji, adjustedPosition, vx, vy);
}

function updateEmojiPosition(emoji, newPosition, vx, vy) {
   emoji.style.left = newPosition.newX + 'px';
   emoji.style.top = newPosition.newY + 'px';

   // Only rotate the emoji if it is moving
   if (vx !== 0 || vy !== 0) {
       const angle = Math.atan2(vy, vx) * 180 / Math.PI + 90;
       emoji.style.transform = `rotate(${angle}deg)`;
   }
}

function adjustForBoundaries(emoji, newX, newY, vx, vy) {
   const windowWidth = window.innerWidth;
   const windowHeight = window.innerHeight;

   if (newX < 0) {
       newX = 0;
       vx = vx;
   } else if (newX + emoji.offsetWidth > windowWidth) {
       newX = windowWidth  emoji.offsetWidth;
       vx = vx;
   }

   if (newY < 0) {
       newY = 0;
       vy = vy;
   } else if (newY + emoji.offsetHeight > windowHeight) {
       newY = windowHeight  emoji.offsetHeight;
       vy = vy;
   }

   return { newX, newY, vx, vy };
}
	Pseudo code of the nested version
Here's a natural language pseudocode description of the `updateChaseMode` function:


* Initialize Emoji and Chasers:
   *    Select all elements with the class '.emoji' and store them in a variable `emojis`.
   *    Create a new Map called `chasers`.
* Assign Empty Chasers to Each Emoji:
   *    Iterate over each emoji in `emojis`.
   *    For each emoji, add an entry in `chasers` with the emoji as the key and an empty array as the value.
* Determine Chasers for Each Emoji:
   *    Again iterate over each emoji in `emojis`.
   *    For each emoji, get its current target from a Map `emojiTargets`.
   *    If the target exists and has not been removed (`isRemoved` is false):
      *       Get the chasers array for this target from `chasers`.
      *       If the chasers array exists, add the current emoji to this array.
* Process Each Emoji with Time Constraint:
   *    Initialize a variable `processedCount` to zero.
   *    Set a maximum update time (e.g., 16 milliseconds) in a variable `maxUpdateTime`.
   *    Record the start time using `performance.now()`.
   *    *    While `processedCount` is less than the length of `emojis`:
      *       Check if the current time exceeds the start time by more than `maxUpdateTime`. If so, break out of the loop.
      *       Select a random emoji from `emojis` using a random index.
      *       Get this emoji's target from `emojiTargets`.
      *      Target Validation and Assignment:
         *         If the target does not exist or has been removed:
            *           Assign a new target to the emoji using `assignNewTarget`.
            *           Update the target from `emojiTargets`.
      *       *      If the Target is Valid:
         *         Calculate the distance between the emoji and its target.
         *         If the distance is less than a threshold (e.g., 10 pixels):
            *           Remove the target and mark it as removed.
            *           Assign a new target to the emoji.
         *       Otherwise:
            *           Calculate attraction (force) towards the target.
            *           Calculate repulsion (force) from each chaser of this emoji.
            *           Combine attraction and repulsion to determine the new velocity.
            *           Calculate the new position, ensuring it stays within window boundaries.
            *           If the emoji is moving (velocity is not zero), rotate the emoji to face the direction of movement.
            *           Update the emoji's position with boundaries considered.
   *    *         Increment `processedCount`.
* Recursive Call for Continuous Update:
   *  If a global variable `isChaseMode` is true, call `updateChaseMode` again using `requestAnimationFrame` for continuous updates.
Pseudo code of the minimal nested version
Here's a natural language pseudocode for the `updateChaseMode` function:


Function updateChaseMode:
*     Select all elements with the class 'emoji'.
*     Initialize chasers for each emoji.
*     Update chasers based on the current emoji targets.
* *     Set a maximum update time limit (16 milliseconds).
*     Record the start time of the function execution.
* *     Initialize a counter for processed emojis.
* *     Start a loop to process emojis:
   *       If the current time exceeds the start time by the maximum update time, exit the loop to avoid long processing delays.
   *       Select a random emoji from the list.
   *       Attempt to process the selected emoji with its associated chasers.
   *       If the emoji is successfully processed, increment the processed counter.
   *       If the emoji is not processed (function returns false), skip to the next iteration without incrementing the counter.
* *     After processing emojis or reaching the time limit, check if chase mode is still active.
*     If chase mode is active, schedule the `updateChaseMode` function to run again in the next animation frame.


Function initializeChasers:
* Accepts a list of emojis.
* Initializes an empty list of chasers for each emoji.
* Returns the map of emojis and their corresponding chasers.


Function updateChasers:
* Accepts a list of emojis and their chasers.
* Updates the chasers list for each emoji based on current targets, excluding removed targets.


Function processEmoji:
* Accepts an emoji and its associated chasers as inputs.
* Retrieve the current target for the emoji.
* Check if the target is either not set or has been marked as removed. If so:
* Assign a new target to the emoji.
* Retrieve the updated target for the emoji.
* Again, check if the target is either not set or has been marked as removed. If so:
   * Return false, indicating the target is not valid and the emoji was not processed.
* If the target is valid and not removed:
   * Process the movement of the emoji towards the target, considering its chasers.
* Return true, indicating the emoji was successfully processed.


Function processMovement:
* Calculates the distance and direction from the emoji to its target.
* If close enough, removes the target and assigns a new one.
* Otherwise, moves the emoji towards the target.


Function calculateDistance:
* Calculates and returns the horizontal and vertical distances and total distance between an emoji and its target.


Function moveEmoji:
* Calculates attraction and repulsion forces for the emoji.
* Applies these forces to move the emoji.


Function calculateForces:
* Calculates attraction force towards the target.
* Calculates repulsion force from other emojis.
* Returns the combined forces.


Function calculateRepulsion:
* For each chaser of the emoji, calculates and accumulates repulsion forces.
* Returns the total repulsion force.


Function calculateRepulsionDistance:
* Calculates the repulsion distance between an emoji and its chaser.


Function applyMovement:
* Calculates the velocity of the emoji based on attraction and repulsion.
* Updates the position of the emoji based on this velocity.


Function calculateNewPosition:
* Calculates and returns the new position of the emoji based on velocity.


Function updatePosition:
* Calculates the new position of the emoji.
* Adjusts the position based on screen boundaries.
* Updates the position and rotation of the emoji on the screen.


Function updateEmojiPosition:
* Updates the position and rotation style of the emoji.


Function adjustForBoundaries:
* Checks and adjusts the new position of the emoji to ensure it stays within screen boundaries.
* Inverts velocity if the emoji hits a boundary.