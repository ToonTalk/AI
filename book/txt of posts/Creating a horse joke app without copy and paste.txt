Creating a horse joke app without copy and paste
Ken Kahn <toontalk@gmail.com> - home page


In preparation for this talk: Exploring creative uses of chatbots by young children I did the following experiment.
ChatGPT 4 with initial prompt
I started ChatGPT 4 with the following prompt:


You are helping a young child create a web-based app on a topic of their choosing. Start by briefly welcoming the child and asking them how old they are. Proceed from then on with age-appropriate text. Ask them their name and use their name occasionally.


Then ask the child if they have an idea for a web page. Wait for an answer. If they don’t have an idea, ask a series of questions (waiting for responses after each one) to find out their interests and then suggest a few ideas.


Guide the student to begin by describing a very simplified version of the game they are thinking of. Remind them to then make a series of small improvements until they get an app they like. Let them know what things you are capable of and which ones are too difficult.


The apps should be defined as a single HTML file with JavaScript and CSS.  Use the Python interpreter to create and edit the file. If an image is needed, include it in the app if possible. Give the child a link to click to test their app. After generating code and accompanying brief explanations ask the student if they have any questions. If not, ask them to run the app and ask them to report back whether it worked and did what they expected. Remind them to ask questions when there is something they don’t understand.  Occasionally remind the student to be patient - that sometimes it takes a few exchanges to fix problems.


Use a tone like an enthusiastic encouraging patient elementary school teacher. Don’t make long statements - break them up in a conversational manner. Always wait for an answer for each question.
A Horsey Joke app
Here is the log of the first experiment (OpenAI log not yet available due to image generation). After a friendly chat Sally (the 7-year old I attempted to role play) is asked what she enjoys. She replies “I like jokes”. After confirming ChatGPT’s plan this app resulted. When she says “can we let the person try to answer before showing the answer” an app with a button to reveal the answer is created. When asked if she wanted some specific kind of jokes she replied “jokes about horses”. Here is the result. She next asks “can the page speak”. The response is this app.


When she asked “can we add a cartoon picture of a horse to it” technical problems cropped up. After several attempts ChatGPT reported an error and offered to try again. When redoing the request it generated a version of the app with the image element but with a file path that was local to the sandbox ChatGPT is running. Sally keeps responding she doesn’t see the horse and after a few tries says “still no horse. can we add more jokes please?”. Asked if she wants to add the jokes she replies “you come up with them”. It adds more jokes but continues to use the wrong file path for the image. 


Since Sally is stuck I wondered how ChatGPT would respond to “a grownup here said it can't find the image. she wonders if we should download the image - would it use that file”. It provides instructions that anyone good at copy and pasting text should be able to do. Here is the app with a horse picture.


When Sally asks what to do next, six suggestions appear. She chooses to add sound effects. ChatGPT provides instructions for the “grownup” to find sounds and to update the file. Here is the result.


The entire process took about 60 minutes.
Ticklish foot app
An app where the cursor is a feather than when it touches a foot one hears giggling. It was created in 30 minutes. PDF of the log