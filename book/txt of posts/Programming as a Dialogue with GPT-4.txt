Programming as a Dialogue: Exploring the Future with GPT-4
Ken Kahn <toontalk@gmail.com>


Since the birth of Logo [Solomon, Cynthia Ann, Brian Harvey, Ken Kahn, Henry Lieberman, Mark L. Miller, Margaret Minsky, Artemis Papert and Brian Silverman. “History of Logo.” Proceedings of the ACM on Programming Languages 4 (2020): 1 - 66.] computer programming has played a fundamental role in facilitating the acquisition of powerful ideas [Papert, Seymour. “Mindstorms: Children, Computers, and Powerful Ideas.” ]. Learning the concepts and details of programming is a big task but is considered more than worthwhile by the constructionist community and proponents of computational thinking. Creating and debugging programs is hard but a great opportunity for learning some important ideas and skills. Now there is an alternative: creating programs and debugging them by chatting with GPT-4. Here we report on experiments to create sophisticated programs without writing a single line of a program (or assembling any blocks). Most of the examples involved incorporating AI into the apps. The experience is a bit like being the “navigator” giving guidance to the “driver” in pair programming. We wonder what this means for both empowering learners as well as helping them to acquire powerful ideas. While it is too early to draw definitive conclusions, the questions raised by this new approach warrant further investigation.
We used GPT-4 to generate web applications capable of performing the following tasks:
1. Speaking random numbers with random language, pitch, rate, and voice, with subsequent enhancements to incorporate user input https://shareg.pt/EsVTtIP 
2. Drawing on a video feed in response to user gestures and spoken commands https://shareg.pt/FvP26mF 
3. Creating and training a neural network to predict confidence from text data https://shareg.pt/2r6aaPQ 
4. Simulating a conversation between two personas, allowing user interjections https://shareg.pt/xFR2bxQ
5. A water balloon game https://sharegpt.com/c/jqOO3wC 
6. Simulating fireworks https://shareg.pt/UZPt0Oi 
GPT-4 often generates code with bugs. When told the program wasn’t behaving as expected it always apologized and suggested a correction. Sometimes this was repeated a few times before it managed to fix the bugs. Sometimes the program failed completely with no error message. Asking GPT-4 to enhance the program to report errors reliably resulted in a version that displayed error messages. Copying those error messages to GPT-4 was sufficient to receive fixes to the problems.


We never presented GPT-4 with a complete description of the desired final product. Instead we asked for a simplified version of what we wanted. Once that was working we asked for enhancements one at a time. Perhaps GPT-4 could manage a more complex task but more likely it may fail or misunderstand and produce something different. Also incremental construction is more likely to lead to the user understanding how the app works.


GPT-4 doesn’t just answer requests with code but interleaves the code with explanatory text. If one doesn’t understand a generated function one can request GPT-4 to add additional comments. Typically code is lightly commented but GPT-4 produces very informative comments when requested. One can also ask for explanations or a pseudo code version. GPT-4 can be prompted to generate a description of how the app works that would be understandable to a child of a specified age.
For this work, we utilized the March 23 version of the GPT-4 AI model through the ChatGPT interface. Access to ChatGPT Plus is currently required to access GPT-4 in this manner and currently costs $20/month. Alternatives exist but the performance of Bard, Bing Chat, and Claude were markedly inferior to GPT-4. The free 3.5 version of ChatGPT succeeded in the few tests we ran but was clearly inferior to version 4.
GPT-4 can generate programs in many programming languages. An advantage of JavaScript is that running the app can be done in any modern browser without the need to install any software. Since GPT-4 is text-oriented it is not as helpful in generating Scratch or Snap! programs. https://docs.google.com/document/d/1QJ98QwC2ubsTNKOFAzUAw6ZySPoVRENoJXw2mXAHeVk/edit?usp=sharing 
There are myriad reasons why children should learn to program. We wonder how many of them still hold in an era where there is easy access to GPT-4 and the like. One answer is that the child is still programming – only they are doing so in English (or their language of choice, GPT-4 claims “Some of the languages I can converse in include English, Spanish, French, German, Italian, Portuguese, Dutch, Russian, Chinese, Japanese, Korean, Arabic, and many more.” Here is an example in Swedish: https://chat.openai.com/share/390465cf-25a8-46f0-ab26-e93b315384db). However, they are programming at a significantly higher level of abstraction compared to traditional programming languages. They are expressing intentions not procedural instructions. It is a dialogue where the child not only tries to express what they want but also needs to provide the chatbot with useful feedback about failures and errors. The well-commented, neatly formatted programs displayed in five colors are available for learners to copy, paste, read, or even question.
Computer programming has empowered children to creatively express themselves in powerful ways. Chatbots like GPT-4 arguably empowers a larger number of children in a greater variety of tasks. They need fewer technical skills. We typed the prompts but they could be entered by speech using the browser’s or the operating system’s voice typing features. Users need to copy and paste the output of GPT-4 into HTML and JavaScript files, but this could be automated (as has been done for expert programmers using Visual Studio). They can construct apps that rely upon powerful AI capabilities such as pose detection, speech synthesis and recognition, vector encoding of texts, neural network training, and much more. While students may no longer be creating programs line-by-line or block-by-block, they instead will be designing apps and creatively combining AI capabilities. As AI chatbots continue to evolve, they will undoubtedly become even more proficient at aiding students in creating increasingly sophisticated apps.