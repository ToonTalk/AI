Exploring how much ChatGPT can help with Snap! programming
Ken Kahn <toontalk@gmail.com>




Exploring how much ChatGPT can help with Snap! programming
How can I make a custom Snap! block for drawing a square
How can I make a sprite chase a sprite that is doing a randow walk? Typo in the original. I installed the ChatGPT plugin for CreatiCode Scratch and ChatGPT decided to use it in the following.
How can I double every element of a list in Snap!?
Can you use  Snap! hyperblocks instead?
No I didn't mean using 'map'. Here's a page from the Snap! manual about hyperblocks. Figures not included: <copy and paste from page 55 of the manual>
Going back to the random walk example can you make the sprite "walk" randomly instead of jumping to random locations?
How would you summarize our coversation? Typo in original
Discussion
How can I make a Snap! reporter the makes every other vowel upper case?
Explain how that works
Can you continue?
Are you sure about "Please note that the index used to determine whether to capitalize a vowel is based on the position of the vowel in the sequence of all vowels in the string, not its position in the string itself. So in "hello world", 'e' is the first vowel and 'o' is the second, hence 'o' gets capitalized."?
Can you redo the when green flag hyperblock example using functional programming
No. Don't use 'set'


Using the GPT 4 (May 12, 2023 version) I wanted to see what support it could give to Snap! programmers. In the following bold are my prompts. My comments are purple italics.
Here is the entire conversation that follows
How can I make a custom Snap! block for drawing a square


Sure, I can help with that. Snap! is a visual programming language, so creating a custom block involves a few steps in the Snap! interface. Here's a general guide on how to create a custom block for drawing a square:


1. Open Snap! in your web browser.
2. Click on the "Variables" category in the blocks palette. No need since “Make a block” is at the end of all palettes. 
3. Click on the "Make a block" button. This will open a dialog for creating a new block.
4. In the dialog, select the category for your new block. For a block that draws a square, the "Motion" category would be appropriate.
5. Enter the name of your new block. In this case, you might name it "draw square".
6. Click on the "OK" button. This will close the dialog and open the block editor.
7. In the block editor, you can define what your new block does. For a block that draws a square, you might use the "move" and "turn" blocks from the "Motion" category to make the sprite move in a square pattern. Here's an example of what the block definition might look like:   
8. Click on the "OK" button in the block editor to save your new block.
Pretty impressive since it looks pretty close to fully faded Snap!:
  
  

Now, you can find your new "draw square" block in the "Motion" category in the blocks palette. You can use this block in your scripts just like any other block. For example, you might use it in a script like this:
  

This script will make the sprite draw a square with side length 100 when the green flag is clicked. It should have set the pen down.


Please note that this is a general guide, and the exact steps may vary depending on your specific needs and the version of Snap! you are using.
How can I make a sprite chase a sprite that is doing a randow walk? Typo in the original. I installed the ChatGPT plugin for CreatiCode Scratch and ChatGPT decided to use it in the following.


Here are the Snap! programs for your two sprites:


   1. The first sprite (Sprite1) moves to a random position every second: I would have preferred a random walk using move and turn. See this later exchange.   
   2. The second sprite (Sprite2) points towards Sprite1 and moves 10 steps towards it every second:
  

These programs will make Sprite2 chase Sprite1, which is moving randomly.


If you have any issues or feedback, please let us know.
How can I double every element of a list in Snap!?
In Snap!, you can create a custom block to double every element of a list. Here's how you can do it:


      1. Click on the "Variables" category in the blocks palette.
      2. Click on the "Make a block" button. This will open a dialog for creating a new block.
      3. In the dialog, select the "Lists" category for your new block.
      4. Enter the name of your new block. You might name it "double list".
      5. Click on the "OK" button. This will close the dialog and open the block editor.
      6. In the block editor, you can define what your new block does. For a block that doubles every element of a list, you might use the "for each item of" block and the "replace item" block. Here's an example of what the block definition might look like:
  

      7. Click on the "OK" button in the block editor to save your new block.


Now, you can find your new "double list" block in the "Lists" category in the blocks palette. You can use this block in your scripts just like any other block. For example, you might use it in a script like this:
  

This script will double every element of the list "my list" and then say the new list when the green flag is clicked.


Please note that this is a general guide, and the exact steps may vary depending on your specific needs and the version of Snap! you are using.
Can you use  Snap! hyperblocks instead?


Yes, Snap! has a powerful feature called "hyperblocks" that allows you to apply a function to all items in a list directly. This makes it easy to double every item in a list. Here's how you can do it:


      1. Create a list variable. You can do this by clicking on the "Variables" category in the blocks palette and then clicking on the "Make a Variable" button. You might name your variable "my list".
      2. Set your list variable to the list you want to double. You can do this with the "set" block. For example, you might set "my list" to [1, 2, 3, 4, 5].
      3. Use the "map" block to apply the multiplication operation to every item in your list. You can find the "map" block in the "Lists" category in the blocks palette. For the function to map, use the multiplication block from the "Operators" category and set one of the operands to 2. For the list to map over, use your list variable.


Here's what the complete script might look like:
  

This script will double every element of the list "my list" and then say the new list when the green flag is clicked.


Please note that this is a general guide, and the exact steps may vary depending on your specific needs and the version of Snap! you are using.
No I didn't mean using 'map'. Here's a page from the Snap! manual about hyperblocks. Figures not included: <copy and paste from page 55 of the manual>


Thank you for the clarification. Hyperblocks in Snap! allow scalar operations to be applied to lists directly, without the need for explicit iteration or mapping. This is a powerful feature that can simplify many operations on lists.


To double every element in a list using hyperblocks, you can simply multiply the list by 2. Here's how you can do it:


      1. Create a list variable. You can do this by clicking on the "Variables" category in the blocks palette and then clicking on the "Make a Variable" button. You might name your variable "my list".
      2. Set your list variable to the list you want to double. You can do this with the "set" block. For example, you might set "my list" to [1, 2, 3, 4, 5].
      3. Multiply your list variable by 2. You can do this with the multiplication block from the "Operators" category. Because of hyperblocks, this will double every item in the list.


Here's what the complete script might look like:
  

This script will double every element of the list "my list" and then say the new list when the green flag is clicked.


Please note that this is a general guide, and the exact steps may vary depending on your specific needs and the version of Snap! you are using.
Going back to the random walk example can you make the sprite "walk" randomly instead of jumping to random locations?


Here is the Snap! program for your sprite to "walk" randomly instead of jumping to random locations:
  

In this program, the sprite will point in a random direction, move 10 steps, bounce if it hits an edge, and then wait for 1 second. This process is repeated 100 times, creating a random "walk" effect.


If you have any issues or feedback, please let us know.
How would you summarize our coversation? Typo in original
Sure, here's a summary of our conversation:


Drawing a Square in Snap!: You asked how to create a custom block in Snap! for drawing a square. I provided a step-by-step guide on how to do this in the Snap! interface.


      1. Drawing a Square in Snap!: You asked how to create a custom block in Snap! for drawing a square. I provided a step-by-step guide on how to do this in the Snap! interface.
      2. Random Walk and Chase in Snap!: You then asked how to make a sprite chase another sprite that is doing a random walk. I used the Creaticode Extension of MIT Scratch to generate Snap! programs for two sprites. The first sprite moves to a random position every second, and the second sprite points towards the first sprite and moves 10 steps towards it every second.
      3. Doubling Elements in a List in Snap!: Next, you asked how to double every element of a list in Snap!. I initially provided a solution using a custom block, but you clarified that you wanted to use Snap!'s hyperblocks feature. I then provided a solution using hyperblocks, which allows scalar operations to be applied to lists directly.
      4. Random Walk Revisited: Finally, you asked for a modification to the random walk example, where the sprite "walks" randomly instead of jumping to random locations. I generated a new Snap! program where the sprite points in a random direction, moves 10 steps, bounces if it hits an edge, and then waits for 1 second, creating a random "walk" effect.


Throughout our conversation, I provided visual representations of the Snap! programs using the Creaticode Extension of MIT Scratch.
Discussion
I am impressed with how well ChatGPT 4 was able to help here. But when I compare it with many more experiments with JavaScript (that I did) and Python (that many papers have been written about), it comes up short. In text-based languages one can simply click on the “Copy code” buttons that ChatGPT provides and paste into a file. ChatGPT has been trained on huge amounts of textual source code and significantly less on block-based languages. Consequently it sometimes mixes Python constructs and Snap!.


I tried a silly little programming task that ChatGPT solved with JavaScript on its first attempt while as seen below it had difficulties with Snap!.
How can I make a Snap! reporter the makes every other vowel upper case?
Creating a Snap! reporter block that makes every other vowel uppercase involves a few steps. Here's a general guide on how to do it:


      1. Open Snap! in your web browser.
      2. Click on the "Variables" category in the blocks palette.
      3. Click on the "Make a block" button. This will open a dialog for creating a new block.
      4. In the dialog, select the "Operators" category for your new block.
      5. Enter the name of your new block. In this case, you might name it "alternate uppercase vowels".
      6. Click on the "OK" button. This will close the dialog and open the block editor.
      7. In the block editor, you can define what your new block does. For a block that makes every other vowel uppercase, you might use the "for each" block to iterate over each character in the input string, the "if" block to check if the character is a vowel and if it's at an odd index, and the "join" block to build the new string. Here's an example of what the block definition might look like:
  
  

      8. Click on the "OK" button in the block editor to save your new block.


Now, you can find your new "alternate uppercase vowels" block in the "Operators" category in the blocks palette. You can use this block in your scripts just like any other block. For example, you might use it in a script like this:
  



There are many problems with this program. “(index of (char))” won’t work. “in uppercase” doesn’t exist. But strangely the Snap! Strings library does have a “to lower case” reporter but not an uppercase one. “(letter (char) of (input))” doesn’t make much sense since the “char” variable is all that is needed. I would have expected the reporter to input and report strings and use “split” and “join”. And the following explanation does confuse strings and lists. Perhaps because in Python one can iterate over each character in a string.
Explain how that works
Sure, here's a breakdown of how the "alternate uppercase vowels" block works:


      1. Set up an empty list: The block starts by setting up an empty list named "output". This list will be used to build the new string where every other vowel is uppercase.
      2. Iterate over each character in the input string: The block uses the "for each" block to iterate over each character in the input string. The variable "char" is used to represent the current character.
      3. Check if the character is a vowel and at an odd index: For each character, the block uses an "if" block to check two conditions: whether the character is a vowel (i.e., it is in the string "aeiou") and whether its index in the string is odd. The "index of" block is used to get the index of the current character, and the "mod" block is used to check if this index is odd by checking if the remainder when divided by 2 is 1.
      4. Add the character to the output list: If both conditions are true, the character is a vowel at an odd index, so the block adds the uppercase version of the character to the "output" list using the "add" block. If either condition is not true, the block adds the original character to the "output" list.
      5. Report the output list: After all characters in the input string have been processed, the block uses the "report" block to return the "output" list. This list contains the characters of the input string, but with every other vowel in uppercase.


This block can be used in a script to process a string and make every other vowel uppercase. For example, if the input string is "hello world", the output will be "hEllo wOrld", with the second and fourth vowels ('e A network error truncated this.
Can you continue?
Certainly, I apologize for the abrupt end.


Continuing from where I left off:


For example, if the input string is "hello world", the output will be "hEllo wOrld", with the second and fourth vowels ('e' and 'o') capitalized.


Please note that the index used to determine whether to capitalize a vowel is based on the position of the vowel in the sequence of all vowels in the string, not its position in the string itself. So in "hello world", 'e' is the first vowel and 'o' is the second, hence 'o' gets capitalized.


This is a powerful feature of Snap! that allows you to manipulate strings in complex ways using custom blocks. The ability to iterate over strings, make decisions based on character properties, and build new strings makes Snap! a versatile tool for text processing tasks.
Are you sure about "Please note that the index used to determine whether to capitalize a vowel is based on the position of the vowel in the sequence of all vowels in the string, not its position in the string itself. So in "hello world", 'e' is the first vowel and 'o' is the second, hence 'o' gets capitalized."?
I apologize for the confusion. You're correct, and I misspoke in my previous message.


In the proposed Snap! block, the index used to determine whether to capitalize a vowel is based on the position of each character in the string itself, not its position in the sequence of vowels. The block checks each character in the string one by one, and if the character is a vowel and its position (index) in the string is odd, it gets capitalized.


So, in "hello world", the 'e' in 'hello' is at an even position (2nd position, considering the first position as 1), and the first 'o' is at an odd position (5th position), so 'o' gets capitalized. The block continues this way, checking each character's position in the entire string.


I appreciate your patience and your keen eye for detail. Thank you for pointing out the error.
Very polite!
Can you redo the when green flag hyperblock example using functional programming
Sure, in Snap! you can use higher order functions to achieve the same effect. Here's how you can do it:


      1. Create a list variable. You can do this by clicking on the "Variables" category in the blocks palette and then clicking on the "Make a Variable" button. You might name your variable "my list".
      2. Set your list variable to the list you want to double. You can do this with the "set" block. For example, you might set "my list" to [1, 2, 3, 4, 5].
      3. Use the "map" block to apply the multiplication operation to every item in your list. You can find the "map" block in the "Lists" category in the blocks palette. For the function to map, use the multiplication block from the "Operators" category and set one of the operands to 2. For the list to map over, use your list variable.


Here's what the complete script might look like:
  

This script will double every element of the list "my list" and then say the new list when the green flag is clicked.


Please note that this is a general guide, and the exact steps may vary depending on your specific needs and the version of Snap! you are using.
No. Don't use 'set'
I see, you'd like to avoid using the 'set' block and instead use a more functional programming approach. In that case, you can use the 'report' block to return the result of the operation without modifying the original list. Here's how you can do it:


      1. Click on the "Variables" category in the blocks palette.
      2. Click on the "Make a block" button. This will open a dialog for creating a new block.
      3. In the dialog, select the "Lists" category for your new block.
      4. Enter the name of your new block. You might name it "double list".
      5. Click on the "OK" button. This will close the dialog and open the block editor.
      6. In the block editor, you can define what your new block does. For a block that doubles every element of a list, you might use the "map" block and the "report" block. Here's an example of what the block definition might look like:
  

      7. Click on the "OK" button in the block editor to save your new block.


Now, you can find your new "double list" block in the "Lists" category in the blocks palette. You can use this block in your scripts just like any other block. For example, you might use it in a script like this:
  

This script will double every element of the list [1, 2, 3, 4, 5] and then say the new list when the green flag is clicked.
Please note that this is a general guide, and the exact steps may vary depending on your specific needs and the version of Snap! you are using.